% \iffalse
%<*desc>
% \fi
% \subsection{Description Macros and Environments}
%
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1999/12/01]
\ProvidesPackage{ydoc-desc}[%
%<!DATE>
%<!VERSION>
%<*DRIVER>
    2011/08/11 develop
%</DRIVER>
    ydoc package to describe macros, environments, options etc.]
%    \end{macrocode}
%
%    \begin{macrocode}
\IfFileExists{needspace.sty}{%
    \RequirePackage{needspace}
}{%
    \def\Needspace{\@ifstar\@gobble\@gobble}
}
%    \end{macrocode}
%
% The short verbatim code is required for the similar macros provided here.
%    \begin{macrocode}
\RequirePackage{shortvrb}
%    \end{macrocode}
%
% The \pkg{etoolbox} package is used mainly for |\newrobustcmd|.
%    \begin{macrocode}
\RequirePackage{etoolbox}
%    \end{macrocode}
%
% \subsubsection{Color and style definitions}
%    \begin{macrocode}
\RequirePackage{xcolor}
\definecolor{macrodesc}{rgb}{0,0.2,0.6}
\definecolor{macroimpl}{rgb}{0,0.1,0.3}
\definecolor{meta}{rgb}{0,0.25,0.75}
\definecolor{scriptcolor}{rgb}{0.2,0.6,0.2}
\definecolor{optioncolor}{rgb}{0.3.0.2,0}
\colorlet{optional}{black!65!white}
\colorlet{metaoptional}{optional!50!meta}
\providecolor{urlcolor}{named}{blue}
\providecolor{linkcolor}{named}{blue}
\providecolor{filecolor}{named}{blue}
\providecolor{citecolor}{named}{blue}
\providecolor{anchorcolor}{named}{blue}
\providecolor{menucolor}{named}{blue}
\providecolor{runcolor}{named}{blue}

%    \end{macrocode}
%
%    \begin{macrocode}
\RequirePackage{hyperref}
\hypersetup{%
    colorlinks=true,
    pdfborder=0 0 0,
    pdfborderstyle={},
    urlcolor=urlcolor,
    linkcolor=linkcolor,
    filecolor=filecolor,
    citecolor=citecolor,
    anchorcolor=anchorcolor,
    menucolor=menucolor,
    runcolor=runcolor,
}

%    \end{macrocode}
%
% \subsubsection{Text Formatting Macros}
%
% \begin{macro}{\meta}
% Prints \meta{meta text}.
%    \begin{macrocode}
\newrobustcmd*\meta[1]{%
  {\metastyle{%
  \ensuremath\langle
    #1\/%
  \ensuremath\rangle
  }}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\marg}
% Sets style and adds braces.
% The text is formatted as separate set of macro arguments.
%    \begin{macrocode}
\newrobustcmd*{\marg}[1]{%
  {\margstyle{%
    {\ttfamily\braceleft}%
    \meta{#1}%
    {\ttfamily\braceright}%
  }}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\oarg}
% Sets style and adds brackets.
% The text is formatted as separate set of macro arguments.
%    \begin{macrocode}
\newrobustcmd*{\oarg}[1]{%
  {\oargstyle{%
    {\ttfamily[}%
    \meta{#1}%
    {\ttfamily]}%
  }}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\parg}
% Sets style and adds parentheses.
%    \begin{macrocode}
\newrobustcmd*{\parg}[1]{%
  {\pargstyle{%
    {\ttfamily(}%
    \meta{#1}%
    {\ttfamily)}%
  }}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\aarg}
% Sets style and adds angles.
%    \begin{macrocode}
\newrobustcmd*{\aarg}[1]{%
  {\aargstyle{%
    {\ttfamily<}%
    \meta{#1}%
    {\ttfamily>}%
  }}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\sarg}
% Prints star with given style.
%    \begin{macrocode}
\newrobustcmd*{\sarg}{{\sargstyle{*}}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\pkg}
% \begin{macro}{\cls}
% \begin{macro}{\lib}
% \begin{macro}{\env}
% \begin{macro}{\opt}
% \begin{macro}{\file}
%    \begin{macrocode}
\newrobustcmd*\pkg[1]{{\pkgstyle{#1}}}
\newrobustcmd*\cls[1]{{\clsstyle{#1}}}
\newrobustcmd*\lib[1]{{\libstyle{#1}}}
\newrobustcmd*\env[1]{{\envstyle{#1}}}

\newrobustcmd*\opt{\@ifstar\ys@opt\y@opt}
\def\y@opt#1{{\optstyle{#1}}}
\def\ys@opt#1{{\optstyle{#1}}\optpar{#1}}
\newrobustcmd*\optpar[1]{\marginpar{\hbox to \marginparwidth{\hss\y@opt{#1}}}}

\newrobustcmd*\file[1]{{\filestyle{#1}}}
\newcommand*\pkgstyle[1]{\texttt{\textcolor{pkg}{#1}}}
\newcommand*\clsstyle[1]{\texttt{\textcolor{cls}{#1}}}
\newcommand*\libstyle[1]{\texttt{\textcolor{lib}{#1}}}
\newcommand*\envstyle[1]{\texttt{\textcolor{env}{#1}}}
\newcommand*\optstyle[1]{\textsf{\textcolor{opt}{#1}}}
\newcommand*\filestyle[1]{\texttt{\textcolor{file}{#1}}}
\colorlet{cls}{black}
\colorlet{lib}{black}
\colorlet{env}{black}
\colorlet{file}{black}
\colorlet{pkg}{black}
\definecolor{opt}{rgb}{0.5,0.16666,0}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\cs}
% \begin{macro}{\cmd}
%    \begin{macrocode}
\newrobustcmd*\cs[1]{\texttt{\textbackslash #1}}
\newrobustcmd*\cmd[1]{\texttt{{\escapechar=92\string#1}}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\Key}
%    \begin{macrocode}
\newrobustcmd*\Key[1]{\texttt{#1}}
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Text Formatting Styles}
%
% \begin{macro}{\macrodescstyle}
% Style of described macro names.
%    \begin{macrocode}
\def\macrodescstyle{\ttfamily\bfseries\color{macrodesc}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\macroargsstyle}
% Default style for macro arguments (e.g.\ \cs{MacroArgs}).
%    \begin{macrocode}
\def\macroargsstyle{\ttfamily}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\envcodestyle}
% Default style for code body content in described environments.
%    \begin{macrocode}
\def\envcodestyle{\ttfamily}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\verbstyle}
% Style for verbatim text inside macro argument list.
%    \begin{macrocode}
\def\verbstyle{\verbatim@font}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\metastyle}
% Meta text style. Because \cs{macroargsstyle} might be also active a |\normalfont| reset
% the font.
%    \begin{macrocode}
\def\metastyle{\normalfont\itshape\color{meta}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\margstyle}
% Style for \cs{marg}.
%    \begin{macrocode}
\def\margstyle{}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\Optional}
% \begin{macro}{\optional}
% \begin{macro}{\optionalstyle}
%    \begin{macrocode}
\protected\def\Optional{\optionalon\optional}
\def\optionalstyle{\blendcolors*{!60!white}\color{black!75}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\optionalon}
% \begin{macro}{\optionaloff}
%    \begin{macrocode}
\def\optionalon{\protected\def\optional{\optionalstyle}}
\def\optionaloff{\let\optional\relax}
\optionalon
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\oargstyle}
% Style for \cs{oarg}. A special color is set to show the `optional' status.
%    \begin{macrocode}
\def\oargstyle{\optional}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\pargstyle}
% Style for \cs{parg}.
%    \begin{macrocode}
\def\pargstyle{}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\aargstyle}
% Style for \cs{aarg}.
%    \begin{macrocode}
\def\aargstyle{}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\sargstyle}
% Style for \cs{sarg}. A special color is set to show the `optional' status.
%    \begin{macrocode}
\def\sargstyle{\ttfamily\color{optional}}
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Dimension Registers}
%
% \begin{macro}{\descindent}
%    \begin{macrocode}
\newdimen\descindent
\descindent=-\parindent
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\beforedescskip}
%    \begin{macrocode}
\newdimen\beforedescskip
\beforedescskip=\bigskipamount
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\afterdescskip}
%    \begin{macrocode}
\newdimen\afterdescskip
\afterdescskip=\medskipamount
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\descsep}
% Set to |1em| in |tt| font.
%    \begin{macrocode}
\newdimen\descsep
\begingroup
\ttfamily
\global\descsep=1em\relax
\endgroup
%    \end{macrocode}
% \end{macro}
%
%
% \subsubsection{Macro Argument Reading Mechanism}
%
% \begin{macro}{\read@Macro@arg}
% Reads next token and calls second macro.
%    \begin{macrocode}
\def\read@Macro@arg{%
  \futurelet\@let@token\handle@Macro@arg
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\AlsoMacro}
% Reads argument while |@| is a letter,
% prints the macro name and reads further arguments.
%    \begin{macrocode}
\newcommand*\AlsoMacro{%
  \begingroup\makeatletter
  \AlsoMacro@
}
\def\AlsoMacro@#1{%
  \endgroup
%<*DEBUG>
    \typeout{DEBUG: Macro: \string#1}%
%</DEBUG>
  \PrintMacroName{#1}%
  \read@Macro@arg
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\ydoc@short@AlsoMacro}
% Makes |&| an alias for |\AlsoMacro|.
%    \begin{macrocode}
\begingroup
\catcode`\|\active
\gdef\ydoc@short@AlsoMacro{%
  \catcode`\|\active
  \let|\AlsoMacro
}
\endgroup
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\ydoc@macrocatcodes}
% Sets the catcodes inside for |read@Macro@arg| material.
%    \begin{macrocode}
\def\ydoc@macrocatcodes{%
  \ydoc@short@AlsoMacro
  \@makeother\'%
  \@makeother\!%
  \@makeother\[%
  \@makeother\]%
  \@makeother\(%
  \@makeother\)%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\handle@Macro@arg}
% Checks if next token is the begin of a valid macro argument and calls
% the appropriate read macro or the end macro otherwise. 
%    \begin{macrocode}
\def\handle@Macro@arg{%
  \expandafter\let\expandafter\handler\csname handle@Macro@token@\meaning\@let@token\endcsname
  \ifx\handler\relax
    \def\handler{\ifhmode\unskip\fi\end@Macro@args}%
%<*DEBUG>
    \typeout{DEBUG: Stopped at: \expandafter\meaning\csname @let@token\endcsname}%
    \typeout{}%
  \else
  \expandafter\ifx\csname @let@token\endcsname\AlsoMacro
    \typeout{DEBUG: TOKEN: \string\AlsoMacro}%
  \else
    \typeout{DEBUG: TOKEN: \expandafter\meaning\csname @let@token\endcsname}%
  \fi
%</DEBUG>
  \fi
  \handler
}
\def\define@Macro@handler{%
    \begingroup
    \ydoc@macrocatcodes
    \define@Macro@handler@
}
\def\define@Macro@handler@#1{%
    \endgroup
    \@namedef{handle@Macro@token@\meaning#1}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\end@Macro@args}
% Closes box as calls hook. Might be locally redefined by some 
% macros calling \cs{read@Macro@arg}.
%    \begin{macrocode}
\def\end@Macro@args{%
  \y@egroup
  \after@Macro@args
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\after@Macro@args}
% Hook to add additional commands in certain situations.
%    \begin{macrocode}
\def\after@Macro@args{%
}
%    \end{macrocode}
% \end{macro}
%
% \subsubsection*{Macro argument reading macros}
% This macros read the macro arguments and call the appropriate format macros.
%
% \begin{macro}{\read@Macro@marg}
%    \begin{macrocode}
\define@Macro@handler{\bgroup}{%
    \begingroup
        \afterassignment\read@Macro@marg@
        \let\@let@token=%
}
\def\read@Macro@marg@{%
        \bgroup
        \margstyle{}%
        \let\end@Macro@args\empty%
        {\ttfamily\braceleft}%
        \aftergroup\read@Macro@marg@@
        \read@Macro@arg
}
\def\read@Macro@marg@@{%
        {\ttfamily\braceright}%
    \endgroup
    \read@Macro@arg
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\read@Macro@oarg}
%    \begin{macrocode}
\define@Macro@handler{[}[{%
    \begingroup
        \let\read@Macro@oarg@end\read@Macro@oarg@@end
        \let\end@Macro@args\read@Macro@oarg@end
        \oargstyle{}%
        {\ttfamily[}%]
        \read@Macro@arg
}
\define@Macro@handler{]}{%
    \read@Macro@oarg@end
}
\def\read@Macro@oarg@@end#1]{%
        #1%
        {\ttfamily]}%
    \endgroup
    \read@Macro@arg
}
\def\read@Macro@oarg@end{\end@Macro@args}
\let\read@Macro@aarg@end\read@Macro@oarg@end
\let\read@Macro@parg@end\read@Macro@oarg@end
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\read@Macro@parg}
%    \begin{macrocode}
\define@Macro@handler{(}({%
    \begingroup
        \let\read@Macro@parg@end\read@Macro@parg@@end
        \let\end@Macro@args\read@Macro@parg@end
        \pargstyle{}%
        {\ttfamily(}%)
        \read@Macro@arg
}
\define@Macro@handler{)}{%
    \read@Macro@parg@end
}
\def\read@Macro@parg@@end#1){%
        #1%
        {\ttfamily)}%
    \endgroup
    \read@Macro@arg
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\read@Macro@aarg}
%    \begin{macrocode}
\def\read@Macro@aarg<{%
    \begingroup
        \let\read@Macro@aarg@end\read@Macro@aarg@@end
        \let\end@Macro@args\read@Macro@aarg@end
        \aargstyle{}%
        {\ttfamily<}%
        \read@Macro@arg
}
\define@Macro@handler{>}{%
    \read@Macro@aarg@end
}
\def\read@Macro@aarg@@end#1>>{%
        #1%
        {\ttfamily>}%
    \endgroup
    \read@Macro@arg
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\read@Macro@angle}
%    \begin{macrocode}
\define@Macro@handler{<}<{%
  \futurelet\@let@token\read@Macro@angle@
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\read@Macro@angle@}
%    \begin{macrocode}
\def\read@Macro@angle@{%
  \ifx\@let@token<%
    \expandafter\read@Macro@aarg
  \else
    \expandafter\read@Macro@meta
  \fi
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\read@Macro@meta}
%    \begin{macrocode}
\def\read@Macro@meta#1>{%
  \meta{#1}\read@Macro@arg
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\read@Macro@sarg}
%    \begin{macrocode}
\define@Macro@handler**{%
  \sarg\read@Macro@arg
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\read@Macro@verb}
% Sets up verbatim mode calls second macro.
%    \begin{macrocode}
\define@Macro@handler{'}'{%
  \begingroup
  \let\do\@makeother
  \dospecials
  \@noligs
  \@makeother\'%
  \obeyspaces
  \read@Macro@verb@
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\read@Macro@verb@}
% Closes verbatim mode and formats text.
% If |#1| is empty (|''|) than a single |'| is printed.
%    \begin{macrocode}
\begingroup
\@makeother\'%
\gdef\read@Macro@verb@#1'{%
  \endgroup
  \ifx\relax#1\relax
    {\verbstyle{\string'}}%
  \else
    {%
     \frenchspacing
     \@noligs\verbstyle{#1}}%
  \fi
  \read@Macro@arg
}
\endgroup
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\read@Macro@cmds}
% Simply executes given code.
%    \begin{macrocode}
\define@Macro@handler!!#1!{%
  #1\relax
  \read@Macro@arg
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\read@Macro@rmspace}
% Removes space. The |\@firstofone| is used to preserve the space in the macro definition.
%    \begin{macrocode}
\define@Macro@handler{\@sptoken} {%
  \read@Macro@arg
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\read@Macro@addtoken}
% Takes token over from input to output `stream'. This is used for |\space| and |~|.
%    \begin{macrocode}
\define@Macro@handler{~}#1{%
  #1\read@Macro@arg
}
\AtBeginDocument{%
\define@Macro@handler{~}#1{%
  #1\read@Macro@arg
}
}
\define@Macro@handler{\space}#1{%
  #1\read@Macro@arg
}
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Description Macros}
% \subsubsection*{For Macros}
%
% \begin{macro}{\DescribeMacro}
%    \begin{macrocode}
\@ifundefined{DescribeMacro}{}{%
  \PackageInfo{ydoc-desc}{Redefining \string\DescribeMacro}{}%
}
%    \end{macrocode}
% A \cs{DescribeMacro} places itself in a \env{DescribeMacros} environment.
% Multiple \cs{DescribeMacro} macros will stack themselves inside this environment.
% For this to work \cs{DescribeMacros} is locally defined to |\y@egroup| to close the
% |\hbox| from the previous \cs{DescribeMacro}.
%    \begin{macrocode}
\def\DescribeMacro{%
  \DescribeMacros
  \let\DescribeMacros\y@egroup
  \optionalon
  \def\after@Macro@args{\endDescribeMacros}%
  \begingroup\makeatletter
  \Describe@Macro
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\DescribeScript}
%    \begin{macrocode}
\def\DescribeScript#1{%
  \DescribeMacros
  \let\DescribeMacros\y@egroup
  \optionalon
  \def\after@Macro@args{\endDescribeMacros}%
  \hbox\y@bgroup
  \texttt{#1}%
  \ydoc@macrocatcodes
  \macroargsstyle
  \read@Macro@arg~%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\DescribeKey}
%    \begin{macrocode}
\def\DescribeKey{%
  \DescribeKeys
  \let\DescribeKeys\y@egroup
  \optionalon
  \def\after@Macro@args{\endDescribeKeys}%
  \begingroup\makeatletter
  \Describe@Macro
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\Describe@Macro}
%    \begin{macrocode}
\def\Describe@Macro#1{%
  \endgroup
  \edef\name{\expandafter\@gobble\string#1}%
  \global\@namedef{href@desc@\name}{}%
  \immediate\write\@mainaux{%
    \global\noexpand\@namedef{href@desc@\name}{}%
  }%
  \hbox\y@bgroup
  \@ifundefined{href@impl@\name}{}{\hyperlink{impl:\name}}%
  {%
  \hbox{\vbox to 0pt{\vss\hbox{\raisebox{4ex}{\hypertarget{desc:\name}{}}}}%
  \PrintMacroName{#1}}%
  }%
  \ydoc@macrocatcodes
  \macroargsstyle
  \read@Macro@arg
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\MakeShortMacroArgs}
% Defines the given character as short version for |\MacroArgs|.
% It is first define to be a short verbatim character to take
% advantage of the house-keeping (save \& restore of the original
% catcode and definition) of |shortvrb|.
%
% The starred version define the character to act like |\Macro| instead.
%    \begin{macrocode}
\newcommand*\MakeShortMacroArgs{%
  \@ifstar
    {\@MakeShortMacroArgs\Macro}%
    {\@MakeShortMacroArgs\MacroArgs}%
}
\def\@MakeShortMacroArgs#1#2{%
  \MakeShortVerb{#2}
  \catcode`#2\active
  \begingroup
  \catcode`\~\active
  \lccode`\~`#2\relax
  \lowercase{\endgroup\gdef~{\bgroup\let~\egroup#1}}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\DeleteShortMacroArgs}
%    \begin{macrocode}
\newcommand*\DeleteShortMacroArgs[1]{%
  \DeleteShortVerb{#1}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\Macro}
% Simply uses the two macros below.
%    \begin{macrocode}
\newcommand*\Macro{\MacroArgs\AlsoMacro}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@Macro}
% Alternative definition of \cs{Macro} inside \env{DescribeMacros} environments.
%    \begin{macrocode}
\def\@Macro{%
  \begingroup\makeatletter
  \Describe@Macro
}
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\define@Macro@handler\AlsoMacro{}
\define@Macro@handler\DescribeMacro{}
\define@Macro@handler\DescribeKey{}
%    \end{macrocode}
%
% \begin{macro}{\MacroArgs}
% Uses the normal macro argument reading mechanism from \cs{DescribeMacro}.
% Instead of a box a simple group is added.
%    \begin{macrocode}
\newcommand*\MacroArgs{%
  \begingroup
  \def\end@Macro@args{\endgroup\xspace}%
  \ydoc@macrocatcodes
  \macroargsstyle
%<*DEBUG>
    \typeout{}%
    \typeout{DEBUG: Start MacroArgs}%
%</DEBUG>
  \read@Macro@arg
}
\RequirePackage{xspace}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\DescribeMacros}
%    \begin{macrocode}
\def\DescribeMacros{%
  \begingroup
  \let\Macro\@Macro
  \parindent=0pt\relax
  \setbox\descbox\vbox\y@bgroup
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\endDescribeMacros}
%    \begin{macrocode}
\def\endDescribeMacros{%
  \y@egroup
  \PrintMacros
  \endgroup
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\DescribeKeys}
%    \begin{macrocode}
\def\DescribeKeys{%
  \begingroup
  \let\PrintMacroName\PrintKeyName
  \let\Key\@Macro
  \parindent=0pt\relax
  \setbox\descbox\vbox\y@bgroup
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\endDescribeKeys}
%    \begin{macrocode}
\def\endDescribeKeys{%
  \y@egroup
  \PrintKeys
  \endgroup
}
\def\PrintKeys{\PrintMacros}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\DescribeMacrosTabcolsep}
%    \begin{macrocode}
\def\DescribeMacrosTabcolsep{\tabcolsep}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\DescribeMacrosTab}
%    \begin{macrocode}
\def\DescribeMacrosTab{%
  \DescribeMacros
  \hbox\y@bgroup
  \tabcolsep=\DescribeMacrosTabcolsep\relax
  \DescribeMacrosTab@
}
\def\DescribeMacrosTab@#1{\tabular{@{}#1@{}}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\endDescribeMacrosTab}
%    \begin{macrocode}
\def\endDescribeMacrosTab{%
  \endtabular\y@egroup
  \endDescribeMacros
}
%    \end{macrocode}
% \end{macro}
%
% \subsubsection*{For Lengths}
%
% \begin{macro}{\DescribeLength}
%    \begin{macrocode}
\newcommand*\DescribeLength{%
  \begingroup
  \let\DescribeLength\Describe@Length
  \setbox\descbox\hbox\y@bgroup
    \tabular{@{}l@{\hspace{2em}}l@{}}%
    \Describe@Length
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\Describe@Length}
%    \begin{macrocode}
\newcommand*\Describe@Length[2]{%
  \PrintLengthName{#1}&
  (Default: {\macroargsstyle#2\unskip})%
  \@ifnextchar\DescribeLength
    {\\}%
    {%
      \endtabular
      \y@egroup
      \PrintLength
      \endgroup
    }%
}
%    \end{macrocode}
% \end{macro}
%
% \subsubsection*{For Environments}
%
% \begin{macro}{\DescribeEnv}
%    \begin{macrocode}
\@ifundefined{DescribeEnv}{}{%
  \PackageInfo{ydoc-desc}{Redefining \string\DescribeEnv}{}%
}
\let\DescribeEnv\relax
%    \end{macrocode}
%    \begin{macrocode}
\newcommand*\DescribeEnv[2][]{%
  \begingroup
  \def\DescribeEnv@name{#2}%
  \let\\\DescribeEnv@newline
%    \end{macrocode}
%
% Sets after-macro-arguments hook.
% First checks if the environment or macro version was used.
% The environment starts a new line only if the next token isn't |\end|, 
% which is taken as end of the environment.
%    \begin{macrocode}
  \ifx\@currenvir\DescribeEnv@string
    \def\after@Macro@args{%
      \let\after@Macro@args\empty
      \setbox\@tempboxa\hbox\y@bgroup
      \@ifnextchar\end{}%
        {\DescribeEnv@newline}%
      #1%
    }%
%    \end{macrocode}
% The macro version adds the optional argument as content line if given.
%    \begin{macrocode}
  \else
    \ifx\relax#1\relax
      \def\after@Macro@args{%
        \y@bgroup
        \endDescribeEnv
      }%
    \else
      \def\after@Macro@args{%
        \setbox\@tempboxa\hbox\y@bgroup
        \DescribeEnv@newline\MacroArgs#1%
        \endDescribeEnv
      }%
    \fi
  \fi
%    \end{macrocode}
% Start |\vbox| and adds first line.
%    \begin{macrocode}
  \setbox\descbox\vbox\y@bgroup
  \envcodestyle
  \let\PrintEnv\PrintSubEnv
  \hbox\y@bgroup
  \PrintEnvName{\begin}{\DescribeEnv@name}%
  \ydoc@macrocatcodes
  \macroargsstyle
  \read@Macro@arg
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\DescribeEnv@newline}
% Closes existing and starts a new horizontal box representing a indented line.
% The optional argument allows to add extra space between lines like the normal |\\|.
% Negative values are not supported.
%    \begin{macrocode}
\newcommand*\DescribeEnv@newline[1][0pt]{%
  \strut\y@egroup
  {\vskip#1}%
  \hbox\y@bgroup\strut
  \hspace*{\descsep}%
  \ignorespaces
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\DescribeEnv@string}
% Holds the environment name for comparison.
%    \begin{macrocode}
\def\DescribeEnv@string{DescribeEnv}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\descbox}
% Save box to store description content.
%    \begin{macrocode}
\newbox\descbox
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\endDescribeEnv}
%    \begin{macrocode}
\def\endDescribeEnv{%
  \y@egroup
  \begingroup
  \setbox\@tempboxa\lastbox
  \ifcase0%
    \ifdim\wd\@tempboxa>\descsep1\fi
    \ifdim\ht\@tempboxa>\ht\strutbox1\fi
    \ifdim\dp\@tempboxa>\dp\strutbox1\fi
  \else
    \box\@tempboxa
  \fi
  \endgroup
  \hbox\y@bgroup
    \PrintEnvName{\end}{\DescribeEnv@name}
  \y@egroup
  \y@egroup
  \PrintEnv
  \endgroup
}
%    \end{macrocode}
% \end{macro}
%
%
% \subsubsection{Print Macros}
%
% \begin{macro}{\PrintMacroName}
% Formats macro name. The backslash is forced to |tt| font.
%    \begin{macrocode}
\def\PrintMacroName#1{%
  {\macrodescstyle{\strut
   \texttt{\char92}%
   \escapechar\m@ne
   \string#1\strut}}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\PrintKeyName}
% Formats macro name. The backslash is forced to |tt| font.
%    \begin{macrocode}
\def\PrintKeyName#1{%
  {\macrodescstyle{\strut
   #1\strut}}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\PrintLengthName}
% Formats length register name.
%    \begin{macrocode}
\let\PrintLengthName\PrintMacroName
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\PrintEnvName}
% |#1| = `|\begin|' or `|\end|', |#2| = env name.
%    \begin{macrocode}
\def\PrintEnvName#1#2{%
  \strut
  \string#1\braceleft
  {\macrodescstyle#2\strut}%
  \braceright
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\PrintMacros}
% Prints macros described using \cs{DescribeMacros}.
% The actual content was stored inside \cs{descbox}.
% If it is wider than the line width it is centered.
%    \begin{macrocode}
\def\PrintMacros{%
  \par\vspace\beforedescskip
  \begingroup
  \sbox\@tempboxa{\descframe{\usebox{\descbox}}}%
  \Needspace*{\dimexpr\ht\@tempboxa+3\baselineskip\relax}%
  \par\noindent
  \ifdim\wd\@tempboxa>\dimexpr\linewidth-2\descindent\relax
    \makebox[\linewidth][c]{\usebox\@tempboxa}%
  \else
    \hspace*{\descindent}%
    \usebox\@tempboxa
  \fi
  \endgroup
  \par
  \vspace\afterdescskip
  \par\noindent
}
\def\descframe#1{%
    \fbox{\hspace*{\descsep}#1\hspace*{\descsep}}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\PrintLength}
% Prints lengths registers described using one or multiple \cs{DescribeLength}.
%    \begin{macrocode}
\let\PrintLength\PrintMacros
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\PrintEnv}
% Prints \env{DescribeEnv} environments.
% The actual content was stored inside \cs{descbox}.
%    \begin{macrocode}
\let\PrintEnv\PrintMacros
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\PrintSubEnv}
% Prints sub environments, i.e.\ \env{DescribeEnv} environments
% inside the body of another \env{DescribeEnv}.
% The actual content was stored inside \cs{descbox}.
%    \begin{macrocode}
\def\PrintSubEnv{%
  \hbox{\hbox{\usebox{\descbox}}}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \subsubsection{Special Character Macros}
%
% \begin{macro}{\bslash}
% Defines an expandable backslash with catcode 12: `\texttt{\bslash}$_{12}$'.
% The |\@firstofone| trick is used to read the |\gdef\bslash| code before changing the catcode.
%    \begin{macrocode}
{%
\@firstofone{%
  \catcode`\\=12
  \gdef\bslash
}{\}
}%}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\percent}
% Defines an expandable percent character with catcode 12: `\percent$_{12}$'.
%    \begin{macrocode}
\begingroup
\catcode`\%=12
\gdef\percent{%}
\endgroup
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\braceleft}
% \begin{macro}{\braceright}
% Defines expandable left and right braces with catcode 12: `\texttt{\braceleft}$_{12}$' `\texttt{\braceright}$_{12}$'.
%    \begin{macrocode}
\begingroup
\catcode`\<=1
\catcode`\>=2
\catcode`\{=12
\catcode`\}=12
\gdef\braceleft <{>
\gdef\braceright<}>
\endgroup
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsubsection{Other Macros}
%
% \begin{macro}{\y@bgroup}
% \begin{macro}{\y@egroup}
% These macros are used to begin and end |\vbox|/|\hbox|-es.
%    \begin{macrocode}
\def\y@bgroup{\bgroup\color@setgroup}
\def\y@egroup{\color@endgroup\egroup}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\codeline}
%    \begin{macrocode}
\newcommand*{\codeline}[1][c]{%
    \codelinebefore
    \hbox to \hsize\bgroup
    \ifx i#1\hspace*{\leftmargin}\else
        \ifx l#1\else\hss\fi
    \fi
    \let\xspace\relax
    \hbox\bgroup
    \aftergroup\codeline@end
    \aftergroup#1%
    \afterassignment\MacroArgs
    \let\@let@token=%
}
\def\codeline@end#1{%
    \ifx r#1\else\hss\fi
    \egroup
    \codelineafter
}
\newcommand*\codelinebefore{\par\smallskip\noindent}
\newcommand*\codelineafter {\par\smallskip\noindent}
%    \end{macrocode}
% \end{macro}
%
% \begin{environment}{codequote}
%    \begin{macrocode}
\newenvironment{codequote}{%
    \def\\{\newline\relax\MacroArgs}%
    \par\smallskip\bgroup\leftskip=\leftmargin\rightskip=\rightmargin\noindent\MacroArgs}
    {\par\egroup\smallskip\noindent\ignorespacesafterend}
%    \end{macrocode}
% \end{environment}
%
% \begin{environment}{macroquote}
%    \begin{macrocode}
\newenvironment{macroquote}{%
    \def\\{\newline\relax\Macro}%
    \par\smallskip\bgroup\leftskip=\leftmargin\rightskip=\rightmargin\noindent\Macro}
    {\par\egroup\smallskip\noindent\ignorespacesafterend}
%    \end{macrocode}
% \end{environment}
%
% \iffalse
%</desc>
% \fi
