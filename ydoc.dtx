% \iffalse
%<*driver>
\begingroup
\def\latexfmt{LaTeX2e}
\ifx\latexfmt\fmtname
\long\def\skip#1\NeedsTeXFormat{\endgroup\NeedsTeXFormat}
\expandafter\skip
\else
\endgroup
\let\NeedsTeXFormat\end
\fi
%</driver>
% \fi
%
% \iffalse
%<@ydocstrip.tex>
% \fi
%
% \iffalse
%<@ydoc.ins>
% \fi
%
% \iffalse
%<*driver>
\NeedsTeXFormat{LaTeX2e}[1999/12/01]
\ProvidesFile{ydoc.dtx}[%
%<=*DATE>
    2022/10/26
%<=/DATE>
%<=*VERSION>
    v0.7alpha
%<=/VERSION>
    DTX file of ydoc]

\message{^^JRun this DTX file using 'tex' to extract all files!^^J}
\documentclass{ydoc}

\newdimen\tempskip

\def\tablecaption{%
  \tempskip=\abovecaptionskip
  \abovecaptionskip=\belowcaptionskip
  \belowcaptionskip=\tempskip
  \caption
}

%\OnlyDescription
\begin{document}
  \DocInput{ydoc.dtx}
  \PrintChanges
  \PrintIndex
\end{document}
%</driver>
% \fi
%
% \CheckSum{0}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
% \changes{v0.1alpha}{2010/04/10}{First released alpha version}
%
% \DoNotIndex{\newcommand,\newenvironment}
%
% \GetFileInfo{ydoc.dtx}
%
% \title{The \textsf{\textbf{ydoc}} Class and Packages}
% \author{Martin Scharrer}
% \repository{https://github.com/MartinScharrer/ydoc/}
% \github{MartinScharrer/ydoc}
% \email{martin@scharrer.de}
% \makeatletter
% \date{Version \expandafter\@gobble\fileversion\\[0.5ex]\filedate}
% \makeatother
%
% \maketitle
%
% \ifpdf
% \hypersetup{%
%   pdfauthor   = {Martin Scharrer <martin.scharrer@web.de>},
%   pdftitle    = {The ydoc package, \fileversion, \filedate},
%   pdfsubject  = {Documentation of LaTeX package ydoc.},
%   pdfkeywords = {ydoc, documentation, LaTeX}
% }%
% \fi
%
%
% \begin{abstract}
% {\color{red}\bfseries This package bundle is currently under development.
% All functionality, settings and macro as well as file names can change in later versions and may be incomplete!
% It is not ready yet to be used for other packages.
% }
%
% The \pkg{ydoc} class and packages provide macros to document the functionality and implementation of \LaTeX{} classes and packages.
% It is similar to the \pkg{ltxdoc} class with the \pkg{doc} package, but uses more modern features/packages by default
% (e.g.\ \pkg{xcolor}, \pkg{hyperref}, \pkg{listings}). However, some of the features like code indexing is not yet included.
% \end{abstract}
%
% \section{Introduction}
% The \pkg{ydoc} packages allow the documentation of \LaTeX\ packages and classes.
% The name stands for ``\emph{Y}et another \emph{Doc}umentation Package'' and is a pun on
% the fact that there are several documentation packages written by package developers
% to document their own packages. All these packages didn't suited the author and therefore he,
% take a guess, wrote his own documentation package.
% It (will) support(s) all macros and environments (but not necessary with full/identical features) provided by the \pkg{doc}
% package to allow the fast adaption of existing |.dtx| files.
%
% This documentation uses the \pkg{ydoc} packages itself and therefore also acts as a live example.
%
% \subsection{\pkg{ydoc} Files}
% The \pkg{ydoc} bundle consists (at the moment, subject to change) of the \cls{ydoc} class and the packages \pkg{ydoc}, \pkg{ydoc-code},
% \pkg{ydoc-desc}, \pkg{ydoc-expl} and \pkg{ydoc-doc}. The \cls{ydoc} class and package allow the user the freedom to use the functionality with other classes if wanted.
% The class will load the package. The \pkg{ydoc} package loads the packages \pkg{ydoc-code}, \pkg{ydoc-desc}, \pkg{ydoc-expl} and \pkg{ydoc-doc}, which
% provide the functionality to document \LaTeX\ code implementation, describe the user-level macro, include live code examples and provide replacements for the
% macros of the \pkg{doc} package, respectively.
% This packages can be loaded on their own in other kind of \LaTeX\ documents if required.
%
% \subsection{Similar Packages}
% Other documentation related classes and packages are \pkg{ltxdoc}, \pkg{doc}, \pkg{dox}, \pkg{xdoc}, \pkg{gmdoc}, \pkg{pauldoc}, \pkg{hypdoc},
% \pkg{codedoc}, \pkg{nicetext} and \pkg{tkz-doc}.
%
%
% \section{Usage}
% (section incomplete)
%
% \subsection{Code Documentation Environments}
%
% \begin{DescribeEnv}{macro}{<macro>}[<\# of args>]!\optional!{<arg~1~description>}!\ldots!{<arg~$n$~description>}
%  \MacroArgs<macro documentation>\\
%  \begin{DescribeEnv}{macrocode}
%     \MacroArgs<macro code>
%  \end{DescribeEnv}\\
%  \ldots
% \end{DescribeEnv}
% The implementation of macros can be documented using this environment. The actual \meta{macro code} must be placed in a \env{macrocode} environment.
% Longer macro definition can be split using multiple \env{macrocode} environments with interleaved documentation texts.
%
% The \pkg{ydoc} definition of the \env{macro} environment has an additional feature compare to \pkg{doc}. The arguments of the macro (|#1|, |#2|, \ldots) can be 
% documented in a vertical list. The environment has an optional argument to declare the \meta{number of arguments} the macro implementation has.
% The descriptions of this macro arguments are read from the next arguments of the environment. If the \meta{number of arguments} is not given or zero (or less)
% no further arguments are read by the \env{macro} environment.
%
% \begin{DescribeEnv}{macrocode}
%     \MacroArgs<macro code>
% \end{DescribeEnv}
% This environment wraps around any \TeX\ code and types it verbatim. The environment end is read verbatim as well and must be written on a separate
% line beginning with a percent followed by exactly four spaces: `\verb*+%    \end{macrocode}+'.
%
% \begin{DescribeEnv}{environment}{<name>}[<\# of args>]!\optional!{<arg~1~description>}!\ldots!{<arg~$n$~description>}
%  \MacroArgs<environment documentation>\\
%  \begin{DescribeEnv}{macrocode}
%     \MacroArgs<macro code>
%  \end{DescribeEnv}\\
%  \ldots
% \end{DescribeEnv}
% This environment provides the same functionality as the \env{macro} environment above, but for environments instead.
%
%
% \subsection{Description Macros and Environments}
%
% \DescribeMacro\DescribeMacro<\textbackslash macro><macro arguments>
% The \cs{DescribeMacro} is used to describe macros included their arguments.
% It takes the to be described \meta{\textbackslash macro} as first argument (can also be enclosed in |{ }|).
% The macro name can include `|@|'. Any number of \meta{macro arguments} (in a broad sense, see Table~\ref{tab:macroargs}) following it
% are formatted as arguments of this macro.
% Any following non-argument token (normal text, macro, etc.)\ will make \cs{DescribeMacro} stop collecting arguments.
% For example, if a \TeX\ group should be started using |{ }| direct after \cs{DescribeMacro} a |\relax| (or a similar macro) should be inserted
% between them, otherwise the group will be taken as mandatory argument of the described macro.
%
% Multiple \cs{DescribeMacro} in a row will automatically stacked inside one framed box. If this is not wanted simply separate them with |\relax|
% or any other macro or token. See also the \env{DescribeMacros} environment below.
%
% \subsubsection*{Examples:}
% \par\noindent |\DescribeMacro\mymacro*[<optional>]{<meta text>}| will result in\\
% \mbox{\Macro\mymacro*[<optional>]{<meta text>}} (inside a framed box).
% \par\medskip\noindent The above syntax description of \cs{DescribeMacro} itself was typeset with\\
% |\DescribeMacro\DescribeMacro<\textbackslash macro><macro arguments>|.
% \par\medskip\noindent Special macros with have a partner macro as end marker can be typeset like this:\\
% |\DescribeMacro\csname<text>\AlsoMacro\endcsname|, which will result in\\
% \mbox{\Macro\csname<text>\AlsoMacro\endcsname}.
%
% \DescribeMacro\Macro<\textbackslash macro><macro arguments>
% This macro is like an in-text version of \cs{DescribeMacro}.
% The macro description stays as part of the surrounding text and is not placed inside a framed box.
% The description can be broken between lines. This can be avoided by placing it inside a |\mbox{}|.
% \cs{Macro} is equivalent to \cs{MacroArgs}\cs{AlsoMacro}.
%
% \DescribeMacro\MacroArgs<macro arguments>
% This macro formats the \meta{macro arguments} the same way as \cs{DescribeMacro} and \cs{Macro} but without a macro name.
% Like \cs{Macro} the description is placed in-text.
%
% \DescribeMacro\AlsoMacro<\textbackslash macro><further macro arguments>
% This macro can only be used inside the \meta{macro arguments} of the above macros and typesets an additional macro as part
% of the syntax of the described macro. The additional macro is normally an end- or other marker of some kind. Further macro arguments may
% follow. Macros which are not part of the syntax but normal arguments should be written as
% |<\textbackslash name>| (yielding \MacroArgs<\textbackslash name>) instead.
% The `\verb+|+' character is an abbreviation of \Macro\AlsoMacro, but only at places where this can appear.
%
% \subsubsection*{Examples:}
% |\Macro\@for<\textbackslash var> ':=' <list> \AlsoMacro\do {<code>}|\\
%  \Macro\@for<\textbackslash var> ':=' <list> \AlsoMacro\do {<code>}
%  \par\medskip\noindent
% |\Macro\pgfkeys{<key1>'='<value1>','<key2>'/.code='{<code>}}|\\
%  \Macro\pgfkeys{<key1>'='<value1>','<key2>'/.code='{<code>}}\\
%
% \DescribeMacro\MakeShortMacroArgs*{<char>}
% This macro is similar to \Macro\MakeShortVerb from the \pkg{shortvrb} package.
% It can be used to globally define one character to act like \Macro\MacroArgs till the same character is discovered again.
% Special characters must be escaped with an backslash for the definition.
% One additional benefit beside the shorter size is that the argument list is automatically terminated.
% For example |\MakeShortMacroArgs{\"}| will make `|"<arg>{<arg>}"|' act like `|\MacroArgs<arg>{<arg>}\relax|'.
% One side-effect is that should the argument list be terminated, e.g. by an unknown element or macro, then the rest of the
% text till the end-character is typeset as normal, but inside a group.
%
% The starred version will define the character equal to \Macro\Macro instead.
%
% \DescribeMacro\DeleteShortMacroArgs{<char>}
% Globally removes the special meaning from \meta{char} given to him by \Macro\MakeShortMacroArgs.
%
% Note that special characters like |`| are
% best defined |\AtBeginDocument| and deleted again |\AtEndDocument| to avoid issues if they are written to the |aux| file by some package.
%
% \begin{DescribeEnv}{DescribeMacros}
%   \Macro\Macro<\textbackslash name><arguments>\\
%   \Macro\Macro<\textbackslash name><arguments>\\
%   \ldots
% \end{DescribeEnv}
% This environment can be used to place multiple macro description into the same framed box.
% The macros are described using \cs{Macro}, which has a slightly different definition than outside of this environment, to place the
% description into a |\hbox|. The environment stacks these |\hbox|es in a |\vbox|. The macros can also be placed freely using anything
% which produces a |\hbox|, e.g.\ |\hbox{\Macro\A ~~~ \Macro\B}| or using
% a |tabular| (see also \env{DescribeMacrosTab}).
%
% \DescribeEnv[<tabular content>]{DescribeMacrosTab}{<tabular column definition>}
% This is a special version of the \env{DescribeMacros} environment which adds a tabular environment around the content.
% This is useful if a large set of small macros should be desribed at once. Placing them all below each other would result in a very bad page layout.
% The environment has one argument which is passed to \env{tabular} as the column definition. A `|@{}|' is added before and after to remove any margins.
%
%
% \begin{DescribeEnv}{DescribeEnv}{<name>}<arguments>
%   \MacroArgs<body content>\relax\space |\\|\\
%   \MacroArgs<more body content>
% \end{DescribeEnv}
% \vspace{-\beforedescskip}
% \DescribeMacro\DescribeEnv[<body content>]{<name>}<arguments>
% The \env{DescribeEnv} can be used to describe environments in the same way the \cs{DescribeMacro} macro describes macros.
% Supported \meta{arguments} are shown in Table~\ref{tab:macroargs}.
% Potential \meta{body content} can be placed between the begin and end of the environment description to explain the user what kind of material
% should be placed inside it. 
% The environment also exists in macro form as \cs{DescribeEnv}, which allows to provide small \meta{body content} as an optional argument.
% Please note that for this optional argument a \cs{MacroArgs} is automatically inserted, but not for the \cs{DescribeEnv} environment content.
%
% The body content is placed into a indented |\hbox{}| stacked inside a |\vbox{}| also holding the environment begin and end line.
% The |\\| macro is redefined to create a new indented |\hbox| acting as new code line.
% Therefore this environment is similar to a one-column \env{tabular}: all macros placed into a line are only valid up to the next line end.
%
% \begin{table}
% \tablecaption{Supported `arguments' for \cs{DescribeMacro}/\cs{DescribeEnv}/\cs{MacroArgs}.}\label{tab:macroargs}
% \begin{tabular}{llll}
%  \toprule
%   Description                &  Syntax       &  Result              & Macro$^{a}$ \\
%  \midrule
%   Meta text                  &  |<text>|     & \MacroArgs<text>     & \Macro\meta{<text>} \\
%   Mandatory Argument         &  |{args}|     & \MacroArgs{args}     & \\
%   ---, with meta text        &  |{<text>}|   & \MacroArgs{<text>}   & \Macro\marg{<text>} \\
%   Optional Argument          &  |[args]|     & \MacroArgs[args]     & \\
%   ---, with meta text        &  |[<text>]|   & \MacroArgs[<text>]   & \Macro\oarg{<text>} \\
%   Picture Argument           &  |(args)|     & \MacroArgs(args)     & \\
%   ---, with meta text        &  |(<text>)|   & \MacroArgs(<text>)   & \Macro\parg{<text>} \\
%   Beamer Overlay Argument    &  |<<args>>|   & \MacroArgs<<args>>   \\
%   ---, with meta text        &  |<< <text> >>| & \MacroArgs<<<text> >>   & \Macro\aarg{<text>} \\
%   Star                       &  |*|          & \MacroArgs*          \\
%  \midrule
%   Verbatim content           &  |'$&^%_#$\'| & \MacroArgs'$&^%_#$\' \\
%   ---, produce |'| char      &  |''|         & \MacroArgs''         \\
%   Insert any \TeX\ code      &  |!\fbox{T}!| & \MacroArgs!\fbox{T}! \\
%   Unbreakable Space          &  |~|          & \\
%   Space (explicit macro)     &  |\space|     & \\
%  \midrule
%   Second macro (e.g.\ endmarker) &  |\AlsoMacro\macro| & \MacroArgs\AlsoMacro\macro \\
%   \hfill short version:        &  \verb+|\macro+     & \MacroArgs|\macro \\
%  \bottomrule
%   \multicolumn{4}{l}{{\Large\strut}$^{a}$) As alternative to be used inside normal text.} \\
%   \multicolumn{4}{l}{Note that `|args|' can itself be further macro arguments except true verbatim.}
% \end{tabular}
% \end{table}
%
% \DescribeMacro\DescribeLength<\textbackslash name>{<default value>}
% This macro can be used to describe \LaTeX\ lengths also known as dimensions. Multiple \cs{DescribeLength} macros in a row will automatically be grouped.
%
% \subsection{Format Macros}
% \begin{DescribeMacrosTab}{ll}
%     \Macro\cs{<macro name>}    & \Macro\env{<environment name>} \\
%     \Macro\pkg{<package name>} & \Macro\cls{<class name>}       \\
% \end{DescribeMacrosTab}
% This macros can be used to format names of macros, environments, packages and classes, respectively.
% At the moment they simply use |\texttt|.
%
% \DescribeMacros\hbox{\Macro\bslash~~~~\Macro\percent~~~~\Macro\braceleft~~~~\Macro\braceright}\endDescribeMacros
% This macros define expandable backslash (\texttt{\bslash}$_{12}$), percent char (\texttt{\percent}$_{12}$),
% and left (\texttt{\braceleft}$_{12}$) and right (\texttt{\braceright}$_{12}$) braces with catcode 12 (other), respectively.
% They should only be used with text-typer font when used in text, because other fonts might not have the
% correct characters. The macros must be protected when used in a moving argument.
%
% \DescribeMacrosTab{@{}ll@{}}
%     \Macro\meta{<meta text>}     &
%     \Macro\marg{<argument text>} \\
%     \Macro\oarg{<argument text>} &
%     \Macro\parg{<argument text>} \\
%     \Macro\aarg{<argument text>} &
%     \Macro\sarg                  \\
% \endDescribeMacrosTab
% This macros allow to typeset meta text and mandatory, optional, picture and beamer overlay arguments as well as a star symbol.
% They are used internally by \cs{MacroArgs} and friends. See Table~\ref{tab:macroargs} for examples.
%
% \DescribeMacrosTab{ll}
%     \Macro\metastyle &
%     \Macro\margstyle \\
%     \Macro\oargstyle &
%     \Macro\pargstyle \\
%     \Macro\aargstyle &
%     \Macro\sargstyle \\
% \endDescribeMacrosTab
% This macros are used to define the style in which the corresponding macros above are being formatted.
% They are used like \MacroArgs '{'<\textbackslash stylemacro>{<material>}'}' to allow the styles to
% use macros like |\ttfamily| or |\texttt|\marg{material}. By default the optional argument and the also optional star are
% printed in the color `|optional|' which is a 65\% gray. 
%
% \subsection{Settings}
% The following macro and dimensions can be redefined by the user to adjust the layout of the package documentation.
%
% \DescribeLength\descindent    {-20pt}
% \DescribeLength\beforedescskip{~12pt plus 4pt minus 4pt}
% \DescribeLength\afterdescskip {~~6pt plus 2pt minus 2pt}
% These length define the indention and vertical distances before and after a \cs{Describe\ldots} macro or environment, respectively.
%
% \DescribeLength\descsep       {1em in \texttt{tt} font = 10.5pt}
% This macro defines the space on the left and right side between the description text and the framed box.
%
% \subsection{Macros and Environments to include LaTeX Code Examples}
% \DescribeEnv{example}
% \DescribeEnv{examplecode}
%
% (to be written)
%
% \StopEventually{}
%
% \clearpage
% \section{Implementation}
%
% \iffalse
%<@ydoc.cls>
% \fi
%
% \iffalse
%<@ydoc.sty>
% \fi
%
% \iffalse
%<@ydoc.cfg>
% \fi
%
% \iffalse
%<@ydoc-code.sty>
% \fi
%
% \iffalse
%<@ydoc-doc.sty>
% \fi
%
% \iffalse
%<@ydoc-desc.sty>
% \fi
%
% \iffalse
%<@ydoc-expl.sty>
% \fi
%
% \iffalse
%<@ydocincl.tex>
% \fi
%
% \Finale
% \endinput
