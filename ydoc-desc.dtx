% \iffalse
%<*copyright>
%% Copyright (c) 2010 by Martin Scharrer <martin@scharrer-online.de>
%% WWW: http://latex.scharrer-online.de/
%%
%% This work may be distributed and/or modified under the
%% conditions of the LaTeX Project Public License, either version 1.3
%% of this license or (at your option) any later version.
%% The latest version of this license is in
%%  http://www.latex-project.org/lppl.txt
%% and version 1.3 or later is part of all distributions of LaTeX
%% version 2005/12/01 or later.
%%
%% This work has the LPPL maintenance status `maintained'.
%%
%% The Current Maintainer of this work is Martin Scharrer.
%%
%% This work consists of the files ydoc-desc.dtx and ydoc-desc.ins
%% and the derived file ydoc-desc.sty.
%</copyright>
% \fi
%
% \iffalse
%<*driver|package>
\RequirePackage{svn-prov}[2010/04/03]
%</driver|package>
%<*driver>
\ProvidesFileSVN[ydoc-desc.dtx]
%</driver>
%<package>\NeedsTeXFormat{LaTeX2e}[1999/12/01]
%<package>\ProvidesPackageSVN
%<*driver|package>
    {$Id$}
    [v0.1 ydoc: description macros]
%</driver|package>
%
%<*driver>
\DefineFileInfoSVN
\GetFileInfoSVN*
\documentclass{ltxdoc}
\RequirePackage{ydoc-desc}[\filedate]

\usepackage{lmodern}
\usepackage{listings}
\usepackage{booktabs}

\newdimen\tempskip

\def\tablecaption{%
  \tempskip=\abovecaptionskip
  \abovecaptionskip=\belowcaptionskip
  \belowcaptionskip=\tempskip
  \caption
}

\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}
  \DocInput{ydoc-desc.dtx}
  \PrintChanges
  \PrintIndex
\end{document}
%</driver>
% \fi
%
% \CheckSum{0}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
% \changes{v0.1}{2010/04/01}{Initial version}
%
% \DoNotIndex{\newcommand,\newenvironment}
%
% \GetFileInfoSVN{ydoc-desc.dtx}
% \title{The \textsf{ydoc-desc} package}
% \author{Martin Scharrer \\ \texttt{martin@scharrer-online.de}}
% \date{\fileversion\ from \filedate}
%
% \maketitle
%
% \begin{abstract}
% {\color{red}This package is currently under development.
% All functionality, settings and macro names can change in later versions.}
%
% This package is part of the \pkg{ydoc} bundle and provides macros and environments to document
% \LaTeX\ packages and classes.
% It can be used together with (i.e.\ after) the \pkg{doc} package and the \cls{ltxdoc} class
% and will redefined all common macros without errors. However, some side effect might occur.
% \end{abstract}
%
% \section{Introduction}
% The \pkg{ydoc} packages allow the documentation of \LaTeX\ packages and classes.
% The name stands for ``\emph{Y}et another \emph{Doc}umentation Package'' and is a pun on
% the fact that there are several documentation packages written by package developers
% to document their own packages. All these packages didn't suited the author and therefore he,
% take a guess, wrote his own documentation package.
%
% This documentation uses the \pkg{ydoc-desc} package itself and therefore also acts as a live example.
%
% \subsection{Similar Packages}
% Other documentation related classes and packages are \pkg{ltxdoc}, \pkg{doc}, \pkg{dox}, \pkg{xdoc}, \pkg{gmdoc}, \pkg{pauldoc}, \pkg{hypdoc},
% \pkg{codedoc}, \pkg{nicetext} and \pkg{tkz-doc}.
%
% The \pkg{ydoc-desc} macro provides some alternative versions of macros also provided by \LaTeX\ standard documentation package \pkg{doc}.
% It implements some features also provided by the package \pkg{nicetext}.
%
% \subsection{Copyright and Licence}
% \lstinputlisting[basicstyle=\footnotesize\ttfamily]{ydoc-desc.cpr}
%
% \section{Usage}
%
% \subsection{Description Macros and Environments}
%
% \DescribeMacro\DescribeMacro<\textbackslash macro><macro arguments>
% The \cs{DescribeMacro} is used to describe macros included their arguments.
% It takes the to be described \meta{\textbackslash macro} as first argument (can also be enclosed in |{ }|).
% The macro name can include `|@|'. Any number of \meta{macro arguments} (in a broad sense, see Table~\ref{tab:macroargs}) following it
% are formatted as arguments of this macro.
% Any following non-argument token (normal text, macro, etc.)\ will make \cs{DescribeMacro} stop collecting arguments.
% For example, if a \TeX\ group should be started using |{ }| direct after \cs{DescribeMacro} a |\relax| (or a similar macro) should be inserted
% between them, otherwise the group will be taken as mandatory argument of the described macro.
%
% Multiple \cs{DescribeMacro} in a row will automatically stacked inside one framed box. If this is not wanted simply separate them with |\relax|
% or any other macro or token. See also the \env{DescribeMacros} environment below.
%
% \subsubsection*{Examples:}
% \par\noindent |\DescribeMacro\mymacro*[<optional>]{<meta text>}| will result in\\
% \mbox{\Macro\mymacro*[<optional>]{<meta text>}} (inside a framed box).
% \par\medskip\noindent The above syntax description of \cs{DescribeMacro} itself was typeset with\\
% |\DescribeMacro\DescribeMacro<\textbackslash macro><macro arguments>|.
% \par\medskip\noindent Special macros with have a partner macro as end marker can be typeset like this:\\
% |\DescribeMacro\csname<text>\AlsoMacro\endcsname|, which will result in\\
% \mbox{\Macro\csname<text>\AlsoMacro\endcsname}.
%
% \DescribeMacro\Macro<\textbackslash macro><macro arguments>
% This macro is like an in-text version of \cs{DescribeMacro}.
% The macro description stays as part of the surrounding text and is not placed inside a framed box.
% The description can be broken between lines. This can be avoided by placing it inside a |\mbox{}|.
% \cs{Macro} is equivalent to \cs{MacroArgs}\cs{AlsoMacro}.
%
% \DescribeMacro\MacroArgs<macro arguments>
% This macro formats the \meta{macro arguments} the same way as \cs{DescribeMacro} and \cs{Macro} but without a macro name.
% Like \cs{Macro} the description is placed in-text.
%
% \DescribeMacro\AlsoMacro<\textbackslash macro><further macro arguments>
% This macro can only be used inside the \meta{macro arguments} of the above macros and typesets an additional macro as part
% of the syntax of the described macro. The additional macro is normally an end- or other marker of some kind. Further macro arguments may
% follow. Macros which are not part of the syntax but normal arguments should be written as
% |<\textbackslash name>| (yielding \MacroArgs<\textbackslash name>) instead. 
%
% \subsubsection*{Example:}
% |\Macro\@for<\textbackslash var> ':=' <list> \AlsoMacro\do {<code>}|\\
%  \Macro\@for<\textbackslash var> ':=' <list> \AlsoMacro\do {<code>}\\
%
% \begin{DescribeEnv}{DescribeMacros}
%   \Macro\Macro<\textbackslash name><arguments>\\
%   \Macro\Macro<\textbackslash name><arguments>\\
%   \ldots
% \end{DescribeEnv}
% This environment can be used to place multiple macro description into the same framed box.
% The macros are described using \cs{Macro}, which has a slightly different definition than outside of this environment, to place the
% description into a |\hbox|. The environment stacks these |\hbox|es in a |\vbox|. The macros can also be placed freely using anything
% which produces a |\hbox|, e.g.\ |\hbox{\Macro\A ~~~ \Macro\B}| or using
% a |tabular| wrapped with a |\hbox| (use |@{}| before the first and after the last column declaration to to get rid of the extra spacing).
%
% \begin{DescribeEnv}{DescribeEnv}{<name>}<arguments>
%   \MacroArgs<body content>\relax\space |\\|\\
%   \MacroArgs<more body content>
% \end{DescribeEnv}
% \vspace{-\beforedescskip}
% \DescribeMacro\DescribeEnv[<body content>]{<name>}<arguments>
% The \env{DescribeEnv} can be used to describe environments in the same way the \cs{DescribeMacro} macro describes macros.
% Supported \meta{arguments} are shown in Table~\ref{tab:macroargs}.
% Potential \meta{body content} can be placed between the begin and end of the environment description to explain the user what kind of material
% should be placed inside it. 
% The environment also exists in macro form as \cs{DescribeEnv}, which allows to provide small \meta{body content} as an optional argument.
% Please note that for this optional argument a \cs{MacroArgs} is automatically inserted, but not for the \cs{DescribeEnv} environment content.
%
% The body content is placed into a indented |\hbox{}| stacked inside a |\vbox{}| also holding the environment begin and end line.
% The |\\| macro is redefined to create a new indented |\hbox| acting as new code line.
%
% \begin{table}
% \tablecaption{Supported `arguments' for \cs{DescribeMacro}/\cs{DescribeEnv}/\cs{MacroArgs}.}\label{tab:macroargs}
% \begin{tabular}{llll}
%  \toprule
%   Description                &  Syntax       &  Result              & Macro$^{a}$ \\
%  \midrule
%   Meta text                  &  |<text>|     & \MacroArgs<text>     & |\meta| \\
%   Mandatory Argument         &  |{<text>}|   & \MacroArgs{<text>}   & |\marg| \\
%   ---, without meta text     &  |{text}|     & \MacroArgs{text}     & \\
%   Optional Argument          &  |[<text>]|   & \MacroArgs[<text>]   & |\oarg| \\
%   ---, without meta text     &  |[text]|     & \MacroArgs[text]     & \\
%   Picture Argument           &  |(<text>)|   & \MacroArgs(<text>)   & |\parg| \\
%   ---, without meta text     &  |(text)|     & \MacroArgs(text)     & \\
%   Beamer Overlay Argument    &  |<<text>>|   & \MacroArgs<<text>>   & |\aarg| \\
%   ---, without meta text     &  |'<'text'>'| & \MacroArgs'<'text'>' \\
%   Star                       &  |*|          & \MacroArgs*          \\
%  \midrule
%   Verbatim content           &  |'$&^%_#$\'| & \MacroArgs'$&^%_#$\' \\
%   ---, produce |'| char      &  |''|         & \MacroArgs''         \\
%   Insert any \TeX\ code      &  |!\fbox{T}!| & \MacroArgs!\fbox{T}! \\
%   Unbreakable Space          &  |~|          & \\
%   Space (explicit macro)     &  |\space|     & \\
%  \midrule
%   Second macro (e.g.\ endmarker) &  |\AlsoMacro\macro| & \MacroArgs\AlsoMacro\macro \\
%  \bottomrule
%   \multicolumn{4}{l}{{\Large\strut}$^{a}$) As alternative to be used inside normal text.}
% \end{tabular}
% \end{table}
%
% \DescribeMacro\DescribeLength<\textbackslash name>{<default value>}
% This macro can be used to describe \LaTeX\ lengths also known as dimensions. Multiple \cs{DescribeLength} macros in a row will automatically be grouped.
%
% \subsection{Format Macros}
% \begin{DescribeMacros}
%   \hbox{\begin{tabular}{@{}ll@{}}
%     \Macro\cs{<macro name>}    & \Macro\env{<environment name>} \\
%     \Macro\pkg{<package name>} & \Macro\cls{<class name>}       \\
%   \end{tabular}}
% \end{DescribeMacros}
% This macros can be used to format names of macros, environments, packages and classes, respectively.
% At the moment they simply use |\texttt|.
%
% \DescribeMacros\hbox{\Macro\bslash~~~~\Macro\percent~~~~\Macro\braceleft~~~~\Macro\braceright}\endDescribeMacros
% This macros define expandable backslash (\texttt{\bslash}$_{12}$), percent char (\texttt{\percent}$_{12}$),
% and left (\texttt{\braceleft}$_{12}$) and right (\texttt{\braceright}$_{12}$) braces with catcode 12 (other), respectively.
% They should only be used with text-typer font when used in text, because other fonts might not have the
% correct characters. The macros must be protected when used in a moving argument.
%
% \DescribeMacros
%   \hbox\bgroup
%   \tabular{@{}ll@{}}
%     \Macro\meta{<meta text>}     &
%     \Macro\marg{<argument text>} \\
%     \Macro\oarg{<argument text>} &
%     \Macro\parg{<argument text>} \\
%     \Macro\aarg{<argument text>} &
%     \Macro\sarg                  \\
%   \endtabular
%   \egroup
% \endDescribeMacros
% This macros allow to typeset meta text and mandatory, optional, picture and beamer overlay arguments as well as a star symbol.
% They are used internally by \cs{MacroArgs} and friends. See Table~\ref{tab:macroargs} for examples.
%
% \DescribeMacros
%   \hbox\bgroup
%   \tabular{@{}ll@{}}
%     \Macro\metastyle &
%     \Macro\margstyle \\
%     \Macro\oargstyle &
%     \Macro\pargstyle \\
%     \Macro\aargstyle &
%     \Macro\sargstyle \\
%   \endtabular
%   \egroup
% \endDescribeMacros
% This macros are used to define the style in which the corresponding macros above are being formatted.
% They are used like \MacroArgs '{'<\textbackslash stylemacro>{<material>}'}' to allow the styles to
% use macros like |\ttfamily| or |\texttt|\marg{material}. By default the optional argument and the also optional star are
% printed in the color `|optional|' which is a 65\% gray. 
%
% \subsection{Settings}
% The following macro and dimensions can be redefined by the user to adjust the layout of the package documentation.
%
% \DescribeLength\descindent    {-20pt}
% \DescribeLength\beforedescskip{~12pt plus 4pt minus 4pt}
% \DescribeLength\afterdescskip {~~6pt plus 2pt minus 2pt}
% These length define the indention and vertical distances before and after a \cs{Describe\ldots} macro or environment, respectively.
%
% \DescribeLength\descsep       {1em in \texttt{tt} font = 10.5pt}
% This macro defines the space on the left and right side between the description text and the framed box.
%
% \StopEventually{}
%
% \clearpage
% \section{Implementation}
%\iffalse
%<*package>
%\fi
%
% \subsection{Color and style definitions}
%    \begin{macrocode}
\RequirePackage{xcolor}
\definecolor{macrodesc}{rgb}{0.0,0.0,0.8}
\definecolor{macroimpl}{rgb}{0.0,0.0,0.4}
\definecolor{meta}{rgb}{0.0,0.4,0.4}
\definecolor{scriptcolor}{rgb}{0.2,0.6,0.2}
\definecolor{optioncolor}{rgb}{0.3.0.2,0}
\colorlet{optional}{black!65!white}
\colorlet{metaoptional}{optional!50!meta}
%    \end{macrocode}
%
% \subsection{Text Formatting Macros}
%
% \begin{macro}{\meta}
% Prints \meta{meta text}.
%    \begin{macrocode}
\def\meta#1{%
  \ensuremath\langle
  {\metastyle{#1\/}}%
  \ensuremath\rangle
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@meta}
% Checks if |#1| is surrounded by angles |< >|.
% If so it calls \cs{is@meta} which removes the angles and calls \cs{meta}.
%    \begin{macrocode}
\def\@meta#1{%
  \@ifnextchar<%
    {\is@meta}%
    {}%
  #1%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\is@meta}
% Only removes the |< >| ands calls \cs{meta}.
%    \begin{macrocode}
\def\is@meta<#1>{%
  \meta{#1}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\marg}
% Calls \cs{marg} with angles added to force meta format.
%    \begin{macrocode}
\def\marg#1{\@marg{<#1>}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\oarg}
% Calls \cs{oarg} with angles added to force meta format.
%    \begin{macrocode}
\def\oarg#1{\@oarg{<#1>}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\parg}
% Calls \cs{parg} with angles added to force meta format.
%    \begin{macrocode}
\def\parg#1{\@parg{<#1>}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\aarg}
% Calls \cs{aarg} with angles added to force meta format.
%    \begin{macrocode}
\def\aarg#1{\@aarg{<#1>}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@marg}
% Sets style and adds braces. Text is formatted with \cs{@meta} which might add meta format.
%    \begin{macrocode}
\def\@marg#1{%
  {\margstyle{%
    {\ttfamily\braceleft}%
    \@meta{#1}%
    {\ttfamily\braceright}%
  }}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@oarg}
% Sets style and adds brackets. Text is formatted with \cs{@meta} which might add meta format.
%    \begin{macrocode}
\def\@oarg#1{%
  {\oargstyle{%
    {\ttfamily[}%
    \@meta{#1}%
    {\ttfamily]}%
  }}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@parg}
% Sets style and adds parentheses. Text is formatted with \cs{@meta} which might add meta format.
%    \begin{macrocode}
\def\@parg#1{%
  {\pargstyle{%
    {\ttfamily(}%
    \@meta{#1}%
    {\ttfamily)}%
  }}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@aarg}
% Sets style and adds angles. Text is formatted with \cs{@meta} which might add meta format.
%    \begin{macrocode}
\def\@aarg#1{%
  {\aargstyle{%
    {\ttfamily<}%
    \@meta{#1}%
    {\ttfamily>}%
  }}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\sarg}
% Prints star with given style.
%    \begin{macrocode}
\def\sarg{{\sargstyle{*}}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\pkg}
% \begin{macro}{\cls}
% \begin{macro}{\env}
% \begin{macro}{\cs}
% \begin{macro}{\opt}
%    \begin{macrocode}
\def\pkg{\texttt}
\def\cls{\texttt}
\def\env{\texttt}
\def\cs#1{\texttt{\textbackslash #1}}
\def\opt{\textsf}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Text Formatting Styles}
%
% \begin{macro}{\macrodescstyle}
% Style of described macro names.
%    \begin{macrocode}
\def\macrodescstyle{\ttfamily\bfseries\color{macrodesc}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\macroargsstyle}
% Default style for macro arguments (e.g.\ \cs{MacroArgs}).
%    \begin{macrocode}
\def\macroargsstyle{\ttfamily}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\envcodestyle}
% Default style for code body content in described environments.
%    \begin{macrocode}
\def\envcodestyle{\ttfamily}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\verbstyle}
% Style for verbatim text inside macro argument list.
%    \begin{macrocode}
\def\verbstyle{\ttfamily}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\metastyle}
% Meta text style. Because \cs{macroargsstyle} might be also active a |\normalfont| reset
% the font.
%    \begin{macrocode}
\def\metastyle{\normalfont\itshape\color{meta}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\margstyle}
% Style for \cs{marg}.
%    \begin{macrocode}
\def\margstyle{}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\oargstyle}
% Style for \cs{oarg}. A special color is set to show the `optional' status.
%    \begin{macrocode}
\def\oargstyle{\color{optional}\colorlet{meta}{metaoptional}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\pargstyle}
% Style for \cs{parg}.
%    \begin{macrocode}
\def\pargstyle{}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\aargstyle}
% Style for \cs{aarg}.
%    \begin{macrocode}
\def\aargstyle{}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\sargstyle}
% Style for \cs{sarg}. A special color is set to show the `optional' status.
%    \begin{macrocode}
\def\sargstyle{\ttfamily\color{optional}}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Dimension Registers}
%
% \begin{macro}{\descindent}
%    \begin{macrocode}
\newdimen\descindent
\descindent=-\parindent
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\beforedescskip}
%    \begin{macrocode}
\newdimen\beforedescskip
\beforedescskip=\bigskipamount
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\afterdescskip}
%    \begin{macrocode}
\newdimen\afterdescskip
\afterdescskip=\medskipamount
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\descsep}
% Set to |1em| in |tt| font.
%    \begin{macrocode}
\newdimen\descsep
\begingroup
\ttfamily
\global\descsep=1em\relax
\endgroup
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Macro Argument Reading Mechanism}
%
% \begin{macro}{\read@Macro@arg}
% Reads next token and calls second macro.
%    \begin{macrocode}
\def\read@Macro@arg{%
  \futurelet\@let@token\handle@Macro@arg
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\handle@Macro@arg}
% Checks if next token is the begin of a valid macro argument and calls
% the appropriate read macro or the end macro otherwise. 
%    \begin{macrocode}
\def\handle@Macro@arg{%
  \ifcase0%
   \ifx\@let@token\bgroup1\else
   \ifx\@let@token[\empty2\else
   \ifx\@let@token(\empty3\else
   \ifx\@let@token<\empty4\else
   \ifx\@let@token*\empty5\else
   \ifx\@let@token'\empty6\else
   \ifx\@let@token!\empty7\else
   \ifx\@let@token\@sptoken8\else
   \ifx\@let@token\space9\else
   \ifx\@let@token~9\else
   \ifx\@let@token\AlsoMacro10\else
   \ifx\@let@token\DescribeMacro11\fi
   \fi\fi\fi\fi\fi\fi\fi\fi\fi\fi\fi
  \relax
   \unskip
   \expandafter\end@Macro@args%0
   \or\expandafter\read@Macro@marg%1
   \or\expandafter\read@Macro@oarg%2
   \or\expandafter\read@Macro@parg%3
   \or\expandafter\read@Macro@angle%4
   \or\expandafter\read@Macro@sarg%5
   \or\expandafter\read@Macro@verb%6
   \or\expandafter\read@Macro@cmds%7
   \or\expandafter\read@Macro@rmspace%8
   \or\expandafter\read@Macro@addtoken%9
  \else%10-
  \fi
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\end@Macro@args}
% Closes box as calls hook. Might be locally redefined by some 
% macros calling \cs{read@Macro@args}.
%    \begin{macrocode}
\def\end@Macro@args{%
  \egroup
  \after@Macro@args
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\after@Macro@args}
% Hook to add additional commands in certain situations.
%    \begin{macrocode}
\def\after@Macro@args{%
}
%    \end{macrocode}
% \end{macro}
%
% \subsubsection*{Macro argument reading macros}
% This macros read the macro arguments and call the appropriate format macros.
%
% \begin{macro}{\read@Macro@marg}
%    \begin{macrocode}
\def\read@Macro@marg#1{%
  \@marg{#1}\read@Macro@arg
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\read@Macro@oarg}
%    \begin{macrocode}
\def\read@Macro@oarg[#1]{%
  \@oarg{#1}\read@Macro@arg
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\read@Macro@parg}
%    \begin{macrocode}
\def\read@Macro@parg(#1){%
  \@parg{#1}\read@Macro@arg
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\read@Macro@aarg}
%    \begin{macrocode}
\def\read@Macro@aarg<#1>>{%
  \aarg{#1}\read@Macro@arg
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\read@Macro@angle}
%    \begin{macrocode}
\def\read@Macro@angle<{%
  \futurelet\@let@token\read@Macro@angle@
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\read@Macro@angle@}
%    \begin{macrocode}
\def\read@Macro@angle@{%
  \ifx\@let@token<%
    \expandafter\read@Macro@aarg
  \else
    \expandafter\read@Macro@meta
  \fi
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\read@Macro@meta}
%    \begin{macrocode}
\def\read@Macro@meta#1>{%
  \meta{#1}\read@Macro@arg
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\read@Macro@sarg}
%    \begin{macrocode}
\def\read@Macro@sarg#1{%
  \sarg\read@Macro@arg
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\read@Macro@verb}
% Sets up verbatim mode calls second macro.
%    \begin{macrocode}
\def\read@Macro@verb{%
  \begingroup
  \let\do\@makeother
  \dospecials
  \read@Macro@verb@
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\read@Macro@verb@}
% Closes verbatim mode and formats text.
% If |#1| is empty (|''|) than a single |'| is printed.
%    \begin{macrocode}
\def\read@Macro@verb@'#1'{%
  \endgroup
  \ifx\relax#1\relax
    {\verbstyle{\string'}}%
  \else
    {\verbstyle{#1}}%
  \fi
  \read@Macro@arg
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\read@Macro@cmds}
% Simply executes given code.
%    \begin{macrocode}
\def\read@Macro@cmds!#1!{%
  #1\relax
  \read@Macro@arg
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\read@Macro@rmspace}
% Removes space. The |\@firstofone| is used to preserve the space in the macro definition.
%    \begin{macrocode}
\@firstofone{\def\read@Macro@rmspace} {%
  \read@Macro@arg
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\read@Macro@addtoken}
% Takes token over from input to output `stream'. This is used for |\space| and |~|.
%    \begin{macrocode}
\def\read@Macro@addtoken#1{%
  #1\read@Macro@arg
}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Description Macros}
% \subsubsection*{For Macros}
%
% \begin{macro}{\DescribeMacro}
%    \begin{macrocode}
\@ifundefined{DescribeMacro}{}{%
  \PackageInfo{ydoc-desc}{Redefining \string\DescribeMacro}{}%
}
%    \end{macrocode}
% A \cs{DescribeMacro} places itself in a \env{DescribeMacros} environment.
% Multiple \cs{DescribeMacro} macros will stack themselves inside this environment.
% For this to work \cs{DescribeMacros} is locally defined to |\egroup| to close the
% |\hbox| from the previous \cs{DescribeMacro}.
%    \begin{macrocode}
\def\DescribeMacro{%
  \DescribeMacros
  \let\DescribeMacros\egroup
  \def\after@Macro@args{\endDescribeMacros}%
  \begingroup\makeatletter
  \Describe@Macro
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\Describe@Macro}
%    \begin{macrocode}
\def\Describe@Macro#1{%
  \endgroup
  \hbox\bgroup
  \yPrintMacroName{#1}%
  \macroargsstyle
  \read@Macro@arg
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\Macro}
% Simply uses the two macros below.
%    \begin{macrocode}
\newcommand*\Macro{\MacroArgs\AlsoMacro}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@Macro}
% Alternative definition of \cs{Macro} inside \env{DescribeMacros} environments.
%    \begin{macrocode}
\def\@Macro{%
  \begingroup\makeatletter
  \Describe@Macro
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\AlsoMacro}
% Reads argument while |@| is a letter,
% prints the macro name and reads further arguments.
%    \begin{macrocode}
\newcommand*\AlsoMacro{%
  \begingroup\makeatletter
  \AlsoMacro@
}
\def\AlsoMacro@#1{%
  \endgroup
  \yPrintMacroName{#1}%
  \read@Macro@arg
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\MacroArgs}
% Uses the normal macro argument reading mechanism from \cs{DescribeMacro}.
% Instead of a box a simple group is added.
%    \begin{macrocode}
\newcommand*\MacroArgs{%
  \begingroup
  \let\end@Macro@args\endgroup
  \read@Macro@arg
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\DescribeMacros}
%    \begin{macrocode}
\def\DescribeMacros{%
  \begingroup
  \let\Macro\@Macro
  \parindent=0pt\relax
  \setbox\descbox\vbox\bgroup
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\endDescribeMacros}
%    \begin{macrocode}
\def\endDescribeMacros{%
  \egroup
  \yPrintMacros
  \endgroup
}
%    \end{macrocode}
% \end{macro}
%
% \subsubsection*{For Lengths}
%
% \begin{macro}{\DescribeLength}
%    \begin{macrocode}
\newcommand*\DescribeLength{%
  \begingroup
  \let\DescribeLength\Describe@Length
  \setbox\descbox\hbox\bgroup
    \tabular{@{}l@{\hspace{2em}}l@{}}%
    \Describe@Length
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\Describe@Length}
%    \begin{macrocode}
\newcommand*\Describe@Length[2]{%
  \yPrintLengthName{#1}&
  (Default: {\macroargsstyle#2\unskip})%
  \@ifnextchar\DescribeLength
    {\\}%
    {%
      \endtabular
      \egroup
      \yPrintLength
      \endgroup
    }%
}
%    \end{macrocode}
% \end{macro}
%
% \subsubsection*{For Environments}
%
% \begin{macro}{\DescribeEnv}
%    \begin{macrocode}
\@ifundefined{DescribeEnv}{}{%
  \PackageInfo{ydoc-desc}{Redefining \string\DescribeEnv}{}%
}
\let\DescribeEnv\relax
%    \end{macrocode}
%    \begin{macrocode}
\newcommand*\DescribeEnv[2][]{%
  \begingroup
  \def\DescribeEnv@name{#2}%
  \let\\\DescribeEnv@newline
%    \end{macrocode}
%
% Sets after-macro-arguments hook.
% First checks if the environment or macro version was used.
% The environment starts a new line only if the next token isn't |\end|, 
% which is taken as end of the environment.
%    \begin{macrocode}
  \ifx\@currenvir\DescribeEnv@string
    \def\after@Macro@args{%
      \let\after@Macro@args\empty
      \@ifnextchar\end
        {\bgroup}%
        {\bgroup\DescribeEnv@newline}%
      #1%
    }%
%    \end{macrocode}
% The macro version adds the optional argument as content line if given.
%    \begin{macrocode}
  \else
    \ifx\relax#1\relax
      \def\after@Macro@args{%
        \bgroup\endDescribeEnv
      }%
    \else
      \def\after@Macro@args{%
        \bgroup\DescribeEnv@newline\MacroArgs#1%
        \endDescribeEnv
      }%
    \fi
  \fi
%    \end{macrocode}
% Start |\vbox| and adds first line.
%    \begin{macrocode}
  \setbox\descbox\vbox\bgroup
  \envcodestyle
  \let\yPrintEnv\yPrintSubEnv
  \hbox\bgroup
  \yPrintEnvName{\begin}{\DescribeEnv@name}%
  \macroargsstyle
  \read@Macro@arg
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\DescribeEnv@newline}
% Closes existing and starts a new horizontal box representing a indented line.
%    \begin{macrocode}
\def\DescribeEnv@newline{%
  \egroup
  \hbox\bgroup\strut
  \hspace*{\descsep}%
  \ignorespaces
}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\DescribeEnv@string}
% Holds the environment name for comparison.
%    \begin{macrocode}
\def\DescribeEnv@string{DescribeEnv}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\descbox}
% Save box to store description content.
%    \begin{macrocode}
\newbox\descbox
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\endDescribeEnv}
%    \begin{macrocode}
\def\endDescribeEnv{%
  \egroup
  \hbox{\yPrintEnvName{\end}{\DescribeEnv@name}}%
  \egroup
  \yPrintEnv
  \endgroup
}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Print Macros}
%
% \begin{macro}{\yPrintMacroName}
% Formats macro name. The backslash is forced to |tt| font.
%    \begin{macrocode}
\def\yPrintMacroName#1{%
  {\macrodescstyle{\strut
   \texttt{\char92}%
   \escapechar\m@ne
   \string#1}}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\yPrintLengthName}
% Formats length register name.
%    \begin{macrocode}
\let\yPrintLengthName\yPrintMacroName
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\yPrintEnvName}
% |#1| = `|\begin|' or `|\end|', |#2| = env name.
%    \begin{macrocode}
\def\yPrintEnvName#1#2{%
  \strut
  \string#1\braceleft
  {\macrodescstyle#2}%
  \braceright
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\yPrintMacros}
% Prints macros described using \cs{DescribeMacros}.
% The actual content was stored inside \cs{descbox}.
% If it is wider than the line width it is centered.
%    \begin{macrocode}
\def\yPrintMacros{%
  \par\vspace\beforedescskip
  \noindent\hspace*{\descindent}%
  \ifdim\wd\descbox>\linewidth
    \makebox[\linewidth][c]{\fbox{\hspace*{\descsep}\usebox{\descbox}\hspace*{\descsep}}}
  \else
    \fbox{\hspace*{\descsep}\usebox{\descbox}\hspace*{\descsep}}%
  \fi
  \par\vspace\afterdescskip
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\yPrintLength}
% Prints lengths registers described using one or multiple \cs{DescribeLength}.
%    \begin{macrocode}
\let\yPrintLength\yPrintMacros
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\yPrintEnv}
% Prints \env{DescribeEnv} environments.
% The actual content was stored inside \cs{descbox}.
%    \begin{macrocode}
\def\yPrintEnv{%
  \par\vspace\beforedescskip
  \noindent\hspace*{\descindent}%
  \fbox{\hspace*{\descsep}\usebox{\descbox}\hspace*{\descsep}}%
  \par\vspace\afterdescskip
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\yPrintSubEnv}
% Prints sub environments, i.e.\ \env{DescribeEnv} environments
% inside the body of another \env{DescribeEnv}.
% The actual content was stored inside \cs{descbox}.
%    \begin{macrocode}
\def\yPrintSubEnv{%
  \hbox{\hbox{\usebox{\descbox}}}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \subsubsection{Special Character Macros}
%
% \begin{macro}{\bslash}
% Defines an expandable backslash with catcode 12: `\texttt{\bslash}$_{12}$'.
% The |\@firstofone| trick is used to read the |\gdef\bslash| code before changing the catcode.
%    \begin{macrocode}
{%
\@firstofone{%
  \catcode`\\=12
  \gdef\bslash
}{\}
}%}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\percent}
% Defines an expandable percent character with catcode 12: `\percent$_{12}$'.
%    \begin{macrocode}
\begingroup
\catcode`\%=12
\gdef\percent{%}
\endgroup
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\braceleft}
% \begin{macro}{\braceright}
% Defines expandable left and right braces with catcode 12: `\texttt{\braceleft}$_{12}$' `\texttt{\braceright}$_{12}$'.
%    \begin{macrocode}
\begingroup
\catcode`\<=1
\catcode`\>=2
\catcode`\{=12
\catcode`\}=12
\gdef\braceleft <{>
\gdef\braceright<}>
\endgroup
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%\iffalse
%</package>
%\fi
%\Finale
\endinput
